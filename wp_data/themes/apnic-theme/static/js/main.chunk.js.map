{"version":3,"file":"static/js/main.chunk.js","sources":["/Volumes/Sites/apnic-practical-test/wp_data/themes/apnic-theme/react-src/src/App.js","webpack:///./src/App.module.css?4c4f","/Volumes/Sites/apnic-practical-test/wp_data/themes/apnic-theme/react-src/src/UI/Spinner/Spinner.js","webpack:///./src/UI/Spinner/Spinner.module.css?6525","/Volumes/Sites/apnic-practical-test/wp_data/themes/apnic-theme/react-src/src/assets/images/apnic.svg","webpack:///./src/components/Labs/Lab.css?fe85","/Volumes/Sites/apnic-practical-test/wp_data/themes/apnic-theme/react-src/src/components/Labs/Lab.js","/Volumes/Sites/apnic-practical-test/wp_data/themes/apnic-theme/react-src/src/components/Labs/Labs.js","webpack:///./src/index.css?4073","/Volumes/Sites/apnic-practical-test/wp_data/themes/apnic-theme/react-src/src/index.js","/Volumes/Sites/apnic-practical-test/wp_data/themes/apnic-theme/react-src/src/serviceWorker.js"],"sourcesContent":["import React from \"react\";\nimport logo from \"../src/assets/images/apnic.svg\";\nimport styles from \"./App.module.css\";\nimport Labs from './components/Labs/Labs.js';\nimport axios from \"axios\";\n\naxios.defaults.baseURL = ' https://academy.apnic.net/wp-json/academy';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className={styles.Header}>\n                <img src={logo} className={styles.Logo} alt=\"APNIC Logo\" />\n            </header>\n            <main>\n                <Labs />\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"App_Logo__3Ad8t\",\"Header\":\"App_Header__ZS1m2\"};","import React from 'react';\nimport classes from '../Spinner/Spinner.module.css'\n\nconst spinner = () => (\n\t<React.Fragment>\n\t\t<div className={classes.Loader}></div>\n\t\t<p>Loading labs...</p>\n\t</React.Fragment>\n);\n\nexport default spinner;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__3warB\",\"load2\":\"Spinner_load2__3Peqf\"};","module.exports = __webpack_public_path__ + \"static/media/apnic.6df07f49.svg\";","// extracted by mini-css-extract-plugin","import React from 'react';\nimport './Lab.css';\n\nconst Lab = (props) => (\n\t<div>{props.name}</div>\n);\n\nexport default Lab;\n","import React, { Component } from 'react';\nimport Lab from './Lab';\nimport Spinner from '../../UI/Spinner/Spinner';\nimport axios from 'axios';\nimport RLDD from 'react-list-drag-and-drop/lib/RLDD';\n\nclass Labs extends Component {\n\tstate = {\n\t\tlabs: null,\n\t\ttotal: null\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\t// console.log(prevProps);\n\t\tconsole.log(prevState);\n\t\tconsole.log(this.state);\n\t\tconsole.log('updated');\n\t}\n\n\tcomponentDidMount() {\n\t\taxios.get('/virtual-labs')\n\t\t.then(response => {\n\t\t\tconst virtualLabs = response.data.virtualLabs;\n\t\t\t\n\t\t\tlet labs = virtualLabs.map( lab => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tid: lab.id,\n\t\t\t\t\t\tname: lab.name,\n\t\t\t\t\t\tdescription: lab.description,\n\t\t\t\t\t\tdurationMinutes: lab.durationMinutes,\n\t\t\t\t\t\tformattedDuration: lab.formattedDuration,\n\t\t\t\t\t\tURL: lab.viewDetailsURL,\n\t\t\t\t\t\timage: lab.thumbnail,\n\t\t\t\t\t\tlanguage: lab.language,\n\t\t\t\t\t\tdemoName: lab.labDemoName,\n\t\t\t\t\t\tdemoURL: lab.labDemoURL,\n\t\t\t\t\t\tindex: null\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\tthis.setState({labs: labs, total: virtualLabs.length });\n\t\t})\n\t\t.catch((error) => {\n\t\t\treturn error;\n\t\t});\n\t}\n\thandleRLDDChange(newItems) {\n\t\tthis.setState({ labs: newItems });\n\t}\n\titemRenderer(item, index) {\n\t\treturn (\n\t\t\t<Lab className=\"item\" key={item.id} name={item.name} index={index} />\n\t\t);\n\t  }\n\n\trender() {\n\t\tlet labs = <Spinner />;\n\t\t\n\t\tif ( this.state.labs ) {\n\t\t\tlabs = <RLDD\n\t\t\t\titems={this.state.labs}\n\t\t\t\titemRenderer={this.itemRenderer.bind(this)}\n\t\t\t\tonChange={this.handleRLDDChange.bind(this)}\n\t\t\t/>\n\t\t}\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t{labs}\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\nexport default Labs;\n","// extracted by mini-css-extract-plugin","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;ACrBA;AACA;;;;;;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;;;;;;;;;;;ACVA;AACA;;;;;;;;;;;ACDA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAaA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAjEA;AACA;AAiEA;;;;;;;;;;;ACxEA;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AAKA;AACA,eA8BA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;A","sourceRoot":""}